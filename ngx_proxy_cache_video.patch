diff -ur nginx-1.9.12/src/http/modules/ngx_http_flv_module.c nginx-1.9.12-patched/src/http/modules/ngx_http_flv_module.c
--- nginx-1.9.12/src/http/modules/ngx_http_flv_module.c 2016-02-24 22:53:23.000000000 +0800
+++ nginx-1.9.12-patched/src/http/modules/ngx_http_flv_module.c 2016-05-08 19:55:54.899931720 +0800
@@ -58,7 +58,7 @@
 };


-static ngx_int_t
+ngx_int_t
 ngx_http_flv_handler(ngx_http_request_t *r)
 {
     u_char                    *last;
@@ -72,6 +72,7 @@
     ngx_chain_t                out[2];
     ngx_open_file_info_t       of;
     ngx_http_core_loc_conf_t  *clcf;
+    off_t                      body_start;

     if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
         return NGX_HTTP_NOT_ALLOWED;
@@ -87,15 +88,24 @@
         return rc;
     }

-    last = ngx_http_map_uri_to_path(r, &path, &root, 0);
-    if (last == NULL) {
-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
+#if (NGX_HTTP_CACHE)
+    if (r->cache) {
+        path = r->cache->file.name;
+        body_start = r->cache->body_start;
+    } else
+#endif
+    {
+        last = ngx_http_map_uri_to_path(r, &path, &root, 0);
+        if (last == NULL) {
+            return NGX_HTTP_INTERNAL_SERVER_ERROR;
+        }
+
+        path.len = last - path.data;
+        body_start = 0;
     }

     log = r->connection->log;

-    path.len = last - path.data;
-
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0,
                    "http flv filename: \"%V\"", &path);

@@ -165,6 +175,8 @@
         return NGX_DECLINED;
     }

+    of.size -= body_start;
+
     r->root_tested = !r->error_page;

     start = 0;
@@ -194,8 +206,13 @@
     r->headers_out.content_length_n = len;
     r->headers_out.last_modified_time = of.mtime;

-    if (ngx_http_set_etag(r) != NGX_OK) {
-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
+#if (NGX_HTTP_CACHE)
+    if (!r->cache)
+#endif
+    {
+        if (ngx_http_set_etag(r) != NGX_OK) {
+            return NGX_HTTP_INTERNAL_SERVER_ERROR;
+        }
     }

     if (ngx_http_set_content_type(r) != NGX_OK) {
@@ -235,8 +252,8 @@
         return rc;
     }

-    b->file_pos = start;
-    b->file_last = of.size;
+    b->file_pos = body_start;
+    b->file_last = body_start + of.size;

     b->in_file = b->file_last ? 1: 0;
     b->last_buf = (r == r->main) ? 1 : 0;
diff -ur nginx-1.9.12/src/http/modules/ngx_http_mp4_module.c nginx-1.9.12-patched/src/http/modules/ngx_http_mp4_module.c
--- nginx-1.9.12/src/http/modules/ngx_http_mp4_module.c 2016-02-24 22:53:24.000000000 +0800
+++ nginx-1.9.12-patched/src/http/modules/ngx_http_mp4_module.c 2016-05-08 19:55:54.928098314 +0800
@@ -153,6 +153,8 @@

     u_char                moov_atom_header[8];
     u_char                mdat_atom_header[16];
+
+    off_t                 body_start;
 } ngx_http_mp4_file_t;


@@ -215,8 +217,6 @@
     &((ngx_http_mp4_trak_t *) mp4->trak.elts)[mp4->trak.nelts - 1]


-static ngx_int_t ngx_http_mp4_handler(ngx_http_request_t *r);
-
 static ngx_int_t ngx_http_mp4_process(ngx_http_mp4_file_t *mp4);
 static ngx_int_t ngx_http_mp4_read_atom(ngx_http_mp4_file_t *mp4,
     ngx_http_mp4_atom_handler_t *atom, uint64_t atom_data_size);
@@ -415,7 +415,7 @@
 };


-static ngx_int_t
+ngx_int_t
 ngx_http_mp4_handler(ngx_http_request_t *r)
 {
     u_char                    *last;
@@ -429,6 +429,7 @@
     ngx_http_mp4_file_t       *mp4;
     ngx_open_file_info_t       of;
     ngx_http_core_loc_conf_t  *clcf;
+    off_t                      body_start;

     if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
         return NGX_HTTP_NOT_ALLOWED;
@@ -444,15 +445,24 @@
         return rc;
     }

-    last = ngx_http_map_uri_to_path(r, &path, &root, 0);
-    if (last == NULL) {
-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
+#if (NGX_HTTP_CACHE)
+    if (r->cache) {
+        path = r->cache->file.name;
+        body_start = r->cache->body_start;
+    } else
+#endif
+    {
+        last = ngx_http_map_uri_to_path(r, &path, &root, 0);
+        if (last == NULL) {
+            return NGX_HTTP_INTERNAL_SERVER_ERROR;
+        }
+
+        path.len = last - path.data;
+        body_start = 0;
     }

     log = r->connection->log;

-    path.len = last - path.data;
-
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0,
                    "http mp4 filename: \"%V\"", &path);

@@ -522,6 +532,8 @@
         return NGX_DECLINED;
     }

+    of.size -= body_start;
+
     r->root_tested = !r->error_page;
     r->allow_ranges = 1;

@@ -585,6 +597,7 @@
         mp4->start = (ngx_uint_t) start;
         mp4->length = length;
         mp4->request = r;
+        mp4->body_start = body_start;

         switch (ngx_http_mp4_process(mp4)) {

@@ -637,8 +650,13 @@
     r->headers_out.status = NGX_HTTP_OK;
     r->headers_out.last_modified_time = of.mtime;

-    if (ngx_http_set_etag(r) != NGX_OK) {
-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
+#if (NGX_HTTP_CACHE)
+    if (!r->cache)
+#endif
+    {
+        if (ngx_http_set_etag(r) != NGX_OK) {
+            return NGX_HTTP_INTERNAL_SERVER_ERROR;
+        }
     }

     if (ngx_http_set_content_type(r) != NGX_OK) {
@@ -667,8 +685,8 @@
         return ngx_http_output_filter(r, mp4->out);
     }

-    b->file_pos = 0;
-    b->file_last = of.size;
+    b->file_pos = body_start;
+    b->file_last = body_start + of.size;

     b->in_file = b->file_last ? 1 : 0;
     b->last_buf = (r == r->main) ? 1 : 0;
@@ -978,7 +996,7 @@
     }

     n = ngx_read_file(&mp4->file, mp4->buffer_start, mp4->buffer_size,
-                      mp4->offset);
+                      mp4->body_start + mp4->offset);

     if (n == NGX_ERROR) {
         return NGX_ERROR;
@@ -1175,8 +1193,8 @@
     ngx_buf_t  *atom;

     atom_data_size = end_offset - start_offset;
-    mp4->mdat_data.buf->file_pos = start_offset;
-    mp4->mdat_data.buf->file_last = end_offset;
+    mp4->mdat_data.buf->file_pos = mp4->body_start + start_offset;
+    mp4->mdat_data.buf->file_last = mp4->body_start + end_offset;

     ngx_log_debug2(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                    "mdat new offset @%O:%O", start_offset, atom_data_size);
diff -ur nginx-1.9.12/src/http/modules/ngx_http_proxy_module.c nginx-1.9.12-patched/src/http/modules/ngx_http_proxy_module.c
--- nginx-1.9.12/src/http/modules/ngx_http_proxy_module.c       2016-02-24 22:53:24.000000000 +0800
+++ nginx-1.9.12-patched/src/http/modules/ngx_http_proxy_module.c       2016-05-08 22:05:45.975078738 +0800
@@ -126,6 +126,8 @@
 #endif
 static ngx_int_t ngx_http_proxy_create_request(ngx_http_request_t *r);
 static ngx_int_t ngx_http_proxy_reinit_request(ngx_http_request_t *r);
+static u_char *ngx_http_proxy_clear_argument(u_char *uri_start,
+    u_char *uri_end, ngx_str_t *arg);
 static ngx_int_t ngx_http_proxy_body_output_filter(void *data, ngx_chain_t *in);
 static ngx_int_t ngx_http_proxy_process_status_line(ngx_http_request_t *r);
 static ngx_int_t ngx_http_proxy_process_header(ngx_http_request_t *r);
@@ -187,6 +189,12 @@
     void *conf);
 static char *ngx_http_proxy_cache_key(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
+static char *ngx_http_proxy_cache_flv(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf);
+static char *ngx_http_proxy_cache_mp4(ngx_conf_t *cf, ngx_command_t *cmd,
+    void *conf);
+static ngx_int_t ngx_http_proxy_cache_flv_handler(ngx_http_request_t *r);
+static ngx_int_t ngx_http_proxy_cache_mp4_handler(ngx_http_request_t *r);
 #endif
 #if (NGX_HTTP_SSL)
 static char *ngx_http_proxy_ssl_password_file(ngx_conf_t *cf,
@@ -540,6 +548,20 @@
       offsetof(ngx_http_proxy_loc_conf_t, upstream.cache_convert_head),
       NULL },

+    { ngx_string("proxy_cache_flv"),
+      NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS,
+      ngx_http_proxy_cache_flv,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      0,
+      NULL },
+
+    { ngx_string("proxy_cache_mp4"),
+      NGX_HTTP_LOC_CONF|NGX_CONF_NOARGS,
+      ngx_http_proxy_cache_mp4,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      0,
+      NULL },
+
 #endif

     { ngx_string("proxy_temp_path"),
@@ -612,6 +634,13 @@
       offsetof(ngx_http_proxy_loc_conf_t, http_version),
       &ngx_http_proxy_http_version },

+    { ngx_string("proxy_clear_argument"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_array_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_proxy_loc_conf_t, upstream.clear_arguments),
+      NULL },
+
 #if (NGX_HTTP_SSL)

     { ngx_string("proxy_ssl_session_reuse"),
@@ -1143,6 +1172,7 @@
     ngx_http_script_engine_t      e, le;
     ngx_http_proxy_loc_conf_t    *plcf;
     ngx_http_script_len_code_pt   lcode;
+    ngx_str_t                    *args;

     u = r->upstream;

@@ -1324,6 +1354,14 @@
         }
     }

+    if (u->conf->clear_arguments != NGX_CONF_UNSET_PTR) {
+        args = u->conf->clear_arguments->elts;
+
+        for (i = 0; i < u->conf->clear_arguments->nelts; i++) {
+            b->last = ngx_http_proxy_clear_argument(u->uri.data, b->last, &args[i]);
+        }
+    }
+
     u->uri.len = b->last - u->uri.data;

     if (plcf->http_version == NGX_HTTP_VERSION_11) {
@@ -1502,6 +1540,59 @@
 }


+static u_char *
+ngx_http_proxy_clear_argument(u_char *uri_start, u_char *uri_end,
+    ngx_str_t *arg)
+{
+    u_char   *p1;
+    u_char   *p2;
+    u_char    s[256 + 1];
+    size_t    n;
+
+    p1 = ngx_strlchr(uri_start, uri_end, '?');
+
+    if (!p1) {
+        return uri_end;
+    }
+
+    p2 = p1 + 1;
+
+    if (arg->len > sizeof(s) - 1) {
+        return uri_end;
+    }
+
+    ngx_memcpy(s, arg->data, arg->len);
+    s[arg->len] = '=';
+    n = arg->len + 1;
+
+    for (;;) {
+        p1 = ngx_strlcasestrn(p2, uri_end, s, n - 1);
+
+        if (!p1) {
+            return uri_end;
+        }
+
+        p2 = p1 + n + 1;
+
+        if (p1[-1] == '?' || p1[-1] == '&') {
+            for (; p2 < uri_end; ++p2) {
+                if (p2[-1] == '&') {
+                    break;
+                }
+            }
+
+            if (p2 >= uri_end) {
+                return p1 - 1;
+            }
+
+            ngx_memmove(p1, p2, uri_end - p2);
+            uri_end -= p2 - p1;
+            p2 = p1;
+        }
+    }
+}
+
+
 static ngx_int_t
 ngx_http_proxy_body_output_filter(void *data, ngx_chain_t *in)
 {
@@ -2854,6 +2945,7 @@
     conf->upstream.cache_lock_age = NGX_CONF_UNSET_MSEC;
     conf->upstream.cache_revalidate = NGX_CONF_UNSET;
     conf->upstream.cache_convert_head = NGX_CONF_UNSET;
+    conf->upstream.cache_content_handler = NGX_CONF_UNSET_PTR;
 #endif

     conf->upstream.hide_headers = NGX_CONF_UNSET_PTR;
@@ -2861,6 +2953,8 @@

     conf->upstream.intercept_errors = NGX_CONF_UNSET;

+    conf->upstream.clear_arguments = NGX_CONF_UNSET_PTR;
+
 #if (NGX_HTTP_SSL)
     conf->upstream.ssl_session_reuse = NGX_CONF_UNSET;
     conf->upstream.ssl_server_name = NGX_CONF_UNSET;
@@ -3155,6 +3249,10 @@
     ngx_conf_merge_value(conf->upstream.cache_convert_head,
                               prev->upstream.cache_convert_head, 1);

+    ngx_conf_merge_ptr_value(conf->upstream.cache_content_handler,
+                              prev->upstream.cache_content_handler,
+                              ngx_http_cache_send);
+
 #endif

     ngx_conf_merge_str_value(conf->method, prev->method, "");
@@ -4218,6 +4316,54 @@
     return NGX_CONF_OK;
 }

+
+static char *
+ngx_http_proxy_cache_flv(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_http_proxy_loc_conf_t *plcf = conf;
+
+    plcf->upstream.cache_content_handler = ngx_http_proxy_cache_flv_handler;
+
+    return NGX_CONF_OK;
+}
+
+
+static char *
+ngx_http_proxy_cache_mp4(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
+{
+    ngx_http_proxy_loc_conf_t *plcf = conf;
+
+    plcf->upstream.cache_content_handler = ngx_http_proxy_cache_mp4_handler;
+
+    return NGX_CONF_OK;
+}
+
+
+static ngx_int_t
+ngx_http_proxy_cache_flv_handler(ngx_http_request_t *r)
+{
+    ngx_int_t ngx_http_flv_handler(ngx_http_request_t *r);
+
+    if (r->headers_out.status == NGX_HTTP_OK) {
+        return ngx_http_flv_handler(r);
+    } else {
+        return ngx_http_cache_send(r);
+    }
+}
+
+
+static ngx_int_t
+ngx_http_proxy_cache_mp4_handler(ngx_http_request_t *r)
+{
+    ngx_int_t ngx_http_mp4_handler(ngx_http_request_t *r);
+
+    if (r->headers_out.status == NGX_HTTP_OK) {
+        return ngx_http_mp4_handler(r);
+    } else {
+        return ngx_http_cache_send(r);
+    }
+}
+
 #endif


diff -ur nginx-1.9.12/src/http/ngx_http_upstream.c nginx-1.9.12-patched/src/http/ngx_http_upstream.c
--- nginx-1.9.12/src/http/ngx_http_upstream.c   2016-02-24 22:53:24.000000000 +0800
+++ nginx-1.9.12-patched/src/http/ngx_http_upstream.c   2016-05-08 19:55:54.932431636 +0800
@@ -993,7 +993,7 @@
             return NGX_DONE;
         }

-        return ngx_http_cache_send(r);
+        return u->conf->cache_content_handler(r);
     }

     if (rc == NGX_ERROR) {
diff -ur nginx-1.9.12/src/http/ngx_http_upstream.h nginx-1.9.12-patched/src/http/ngx_http_upstream.h
--- nginx-1.9.12/src/http/ngx_http_upstream.h   2016-02-24 22:53:24.000000000 +0800
+++ nginx-1.9.12-patched/src/http/ngx_http_upstream.h   2016-05-08 20:18:28.900764760 +0800
@@ -198,11 +198,15 @@
     ngx_array_t                     *cache_valid;
     ngx_array_t                     *cache_bypass;
     ngx_array_t                     *no_cache;
+
+    ngx_http_handler_pt              cache_content_handler;
 #endif

     ngx_array_t                     *store_lengths;
     ngx_array_t                     *store_values;

+    ngx_array_t                     *clear_arguments;
+
 #if (NGX_HTTP_CACHE)
     signed                           cache:2;
 #endif
